{"version":3,"sources":["redux/pb-actions.js","redux/pb-operations.js","redux/pb-selectors.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","redux/pb-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSucces","fetchContactsError","addContactsRequest","addContactsSucces","addContactsError","deleteContactsRequest","deleteContactsSucces","deleteContactsError","filterContact","axios","defaults","baseURL","getIsLoading","state","contacts","loading","getFilter","filter","getVisibleContacts","createSelector","items","normalizeFilter","toLowerCase","item","name","includes","ContactForm","number","onInputChange","evt","setState","target","value","handleSubmit","preventDefault","props","addContact","inputId","shortid","generate","this","className","onSubmit","htmlFor","type","pattern","title","required","onChange","Component","connect","dispatch","post","then","data","catch","error","operations","selectors","onDeleteContact","id","contactId","delete","res","map","contact","onClick","actions","App","fetchContacts","isLoading","get","createReducer","action","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f30070fa.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const fetchContactsRequest = createAction('fetchContactsRequest');\r\nexport const fetchContactsSucces = createAction('fetchContactsSucces');\r\nexport const fetchContactsError = createAction('fetchContactsError');\r\n\r\nexport const addContactsRequest = createAction('addContactsRequest');\r\nexport const addContactsSucces = createAction('addContactsSucces');\r\nexport const addContactsError = createAction('addContactsError');\r\n\r\nexport const deleteContactsRequest = createAction('deleteContactsRequest');\r\nexport const deleteContactsSucces = createAction('deleteContactsSucces');\r\nexport const deleteContactsError = createAction('deleteContactsError');\r\n\r\n\r\n\r\n// export const addContact = createAction('addContact', (name, number) => ({\r\n//     payload: {id: shortid.generate(), name, number}\r\n// }));\r\n// export const deleteContact = createAction('deleteContact');\r\nexport const filterContact = createAction('fitlerContact');","import axios from 'axios';\r\nimport {\r\n    addContactsRequest,\r\n    addContactsSucces,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSucces,\r\n    deleteContactsError,\r\n    fetchContactsRequest,\r\n    fetchContactsSucces,\r\n    fetchContactsError,\r\n} from './pb-actions';\r\n\r\n\r\n    axios.defaults.baseURL = 'http://localhost:4040/';\r\n\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    axios.get('/contacts')\r\n        .then(res => dispatch(fetchContactsSucces(res.data)))\r\n        .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n    dispatch(addContactsRequest());\r\n\r\n    axios.post('/contacts', { name, number })\r\n        .then(({data}) => dispatch(addContactsSucces(data)))\r\n        .catch(error => dispatch(addContactsError(error)));\r\n};\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactsRequest());\r\n\r\n    axios.delete(`/contacts/${contactId}`)\r\n        .then(res => dispatch(deleteContactsSucces(contactId)))\r\n        .catch(error => dispatch(deleteContactsError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getIsLoading = state => state.contacts.loading;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// export const getVisibleContacts = state => {\r\n//     const filter = getFilter(state);\r\n//     const allContacts = getAllContacts(state);\r\n//     const normalizeFilter = filter.toLowerCase();\r\n//     return allContacts.filter(item => item.name.toLowerCase().includes(normalizeFilter));\r\n// };\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getFilter, getAllContacts],\r\n    (filter, items) => {\r\n        const normalizeFilter = filter.toLowerCase();\r\n\r\n        return items.filter(item => item.name.toLowerCase().includes(normalizeFilter));\r\n     }\r\n);","import './ContactForm.css';\r\nimport React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport shortid from \"shortid\";\r\nimport * as operations from '../../redux/pb-operations';\r\n\r\n\r\nclass ContactForm extends Component{\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n    onInputChange = evt => {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    };\r\n    \r\n    handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        const { name, number } = this.state;\r\n       \r\n        this.props.addContact(name, number);\r\n\r\n        this.setState({ name: \"\", number: \"\" });   \r\n    };\r\n    \r\n    render()\r\n    {\r\n        const inputId = shortid.generate();\r\n        const { name, number } = this.state;\r\n\r\n        return (\r\n            <div className=\"Container-form\">\r\n\r\n                    <form className=\"form\" onSubmit={this.handleSubmit}>\r\n                        <label htmlFor={inputId}>\r\n                            Name\r\n                            <br></br>\r\n                            <input\r\n                                className=\"Container-form__input\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                                required\r\n                                value={name}\r\n                                onChange={this.onInputChange}\r\n                            />\r\n                        </label>\r\n                        <br></br>\r\n                        <label>\r\n                            Number\r\n                            <br></br>\r\n                            <input\r\n                                className=\"Container-form__input\"\r\n                                type=\"tel\"\r\n                                name=\"number\"\r\n                                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                                title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                                required\r\n                                value={number}\r\n                                onChange={this.onInputChange}\r\n                            />\r\n                        </label>\r\n                        <br></br>\r\n                      <button type=\"submit\" className=\"Container-form__btn\">Add Contact</button>  \r\n                    </form>\r\n                 \r\n                </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    \r\n    addContact: (name, number) => dispatch(operations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import './ContactList.css';\r\nimport React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport * as operations from '../../redux/pb-operations';\r\nimport * as selectors from '../../redux/pb-selectors';\r\nimport shortid from \"shortid\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n    \r\n    \r\n\r\n    return (\r\n\r\n        <div className=\"Contact-container\">\r\n            <ul className=\"Contact-container__list\">\r\n                {contacts.map(contact => (\r\n                    <li key={shortid.generate()} className=\"Contact-container__item\">{contact.name}: {contact.number}\r\n                        <button onClick={() => onDeleteContact(contact.id)}>Delete</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: selectors.getVisibleContacts(state)\r\n    // const { items, filter } = state.contacts;\r\n    // const normalizeFilter = filter.toLowerCase();\r\n    // const visibleContacts = items.filter(item => item.name.toLowerCase().includes(normalizeFilter));\r\n    // return { contacts: visibleContacts }\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    \r\n    onDeleteContact: id => dispatch(operations.deleteContact(id))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import { connect } from \"react-redux\";\r\nimport * as actions from '../../redux/pb-actions';\r\nimport * as selectors from '../../redux/pb-selectors';\r\n\r\n\r\nconst Filter = ({value, onChange}) => {\r\n\r\n    return (\r\n        <div>\r\n            <h3>Find contact by name</h3>\r\n            <label>\r\n                <input\r\n                    name=\"search\"\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={onChange}\r\n                ></input>\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: selectors.getFilter(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (evt) => dispatch(actions.filterContact(evt.target.value))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport * as operations from './redux/pb-operations';\nimport * as selectors from './redux/pb-selectors';\n\n// Components\nimport ContactForm from './Components/ContactForm';\nimport ContactList from './Components/ContactList';\nimport Filter from './Components/Filter';\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.fetchContacts()\n  };\n  \n  render() {\n    return (\n      <div className=\"Container\">\n        {this.props.isLoading && <h1>LOADING...</h1>}\n      \n      <h2>Phonebook</h2>\n      \n        <ContactForm />\n        \n      <h2>Contacts</h2>\n        \n        <Filter />\n        \n        <ContactList />\n        \n      </div>\n    )\n  };\n};\n\nconst mapStateToProps = state => ({\n  isLoading: selectors.getIsLoading(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(operations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactsRequest,\r\n    addContactsSucces,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSucces,\r\n    deleteContactsError,\r\n    filterContact,\r\n    fetchContactsRequest,\r\n    fetchContactsSucces,\r\n    fetchContactsError,\r\n} from './pb-actions';\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSucces]: (state, action) => action.payload,\r\n\r\n    [addContactsSucces]: (state, action) => [action.payload, ...state],\r\n\r\n    [deleteContactsSucces]: (state, action) => state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [filterContact]: (state, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSucces]: () => false,\r\n    [fetchContactsError]: () => false,\r\n\r\n    [addContactsRequest]: () => true,\r\n    [addContactsSucces]: () => false,\r\n    [addContactsError]: () => false,\r\n\r\n    [deleteContactsRequest]: () => true,\r\n    [deleteContactsSucces]: () => false,\r\n    [deleteContactsError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n});","import { configureStore, getDefaultMiddleware, combineReducers } from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER, } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport contactReducer from './pb-reducer';\r\nimport logger from 'redux-logger';\r\n\r\n// const persistConfig = {\r\n//   key: 'my-contacts',\r\n//   storage,\r\n// };\r\n\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}),\r\n  logger\r\n];\r\n  \r\n// const contactsPersistConfig = {\r\n//   key: 'my-contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts:  contactReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\nimport store from './redux/store';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}